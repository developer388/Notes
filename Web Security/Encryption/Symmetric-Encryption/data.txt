Cross Site Scripting (XSS)
Attacker injects malcious code through web browser.

Cross-site scripting (XSS) is a type of security vulnerability that can be found in some web applications. XSS attacks enable attackers to inject client-side scripts into web pages viewed by other users. A cross-site scripting vulnerability may be used by attackers to bypass access controls such as the same-origin policy. Cross-site scripting carried out on websites accounted for roughly 84% of all security vulnerabilities documented by Symantec up until 2007.[1] XSS effects vary in range from petty nuisance to significant security risk, depending on the sensitivity of the data handled by the vulnerable site and the nature of any security mitigation implemented by the site's owner network.


Types
1. Reflected XSS: Attacker tries to pass malicious code in input and tries to get sensitve information. In relfected XSS, user input is not stored in the server.


2. Stored XSS: Attacker tries to pass malicious code in input. This malcious code is stored in the server database and when it is rendered to other users of the website. Malcious code is executed for them. 

3. DOM XSS : In DOM XSS Attacker tries to pass malicious code in request URL to read sensitve information.



SQL Injection

In computing, SQL injection is a code injection technique used to attack data-driven applications, in which malicious SQL statements are inserted into an entry field for execution (e.g. to dump the database contents to the attacker). SQL injection must exploit a security vulnerability in an application's software, for example, when user input is either incorrectly filtered for string literal escape characters embedded in SQL statements or user input is not strongly typed and unexpectedly executed. SQL injection is mostly known as an attack vector for websites but can be used to attack any type of SQL database.

SQL injection attacks allow attackers to spoof identity, tamper with existing data, cause repudiation issues such as voiding transactions or changing balances, allow the complete disclosure of all data on the system, destroy the data or make it otherwise unavailable, and become administrators of the database server. Document-oriented NoSQL databases can also be affected by this security vulnerability.[3]

In a 2012 study, it was observed that the average web application received four attack campaigns per month, and retailers received twice as many attacks as other industries.


In SQL injection, attacker tries to pass SQL code in input to server. So that database can execute the malcious SQL code and return senstive data to the attacker.

Select * from user where username = ''or 1=1'  attacker trying to make the username match true by passing ' or 1=1' in username input box




Cross-site request forgery

Cross-site request forgery, also known as one-click attack or session riding and abbreviated as CSRF (sometimes pronounced sea-surf[1]) or XSRF, is a type of malicious exploit of a website or web application where unauthorized commands are submitted from a user that the web application trusts.[2] There are many ways in which a malicious website can transmit such commands; specially-crafted image tags, hidden forms, and JavaScript fetch or XMLHttpRequests, for example, can all work without the user's interaction or even knowledge. Unlike cross-site scripting (XSS), which exploits the trust a user has for a particular site, CSRF exploits the trust that a site has in a user's browser.[3] In a CSRF attack, an innocent end user is tricked by an attacker into submitting a web request that they did not intend. This may cause actions to be performed on the website that can include inadvertent client or server data leakage, change of session state, or manipulation of an end user's account.

The term "CSRF" is also used as an abbreviation in defences against CSRF attacks, such as techniques that use header data, form data, or cookies, to test for and prevent such attacks.




How can you avoid a brute force attack?
There are a variety of techniques for stopping or preventing brute force attacks.

A robust password policy is the most evident. Strong passwords should be enforced by every web application or public server. Standard user accounts, for example, must contain at least eight characters, a number, uppercase and lowercase letters, and a special character. Furthermore, servers should mandate password updates on a regular basis.
Brute Force attack can also be avoided by the following methods:-

Limit the number of failed login attempts.
By altering the sshd_config file, you can make the root user unreachable via SSH.
Instead of using the default port, change it in your sshd config file.
Make use of Captcha.
Limit logins to a certain IP address or range of IP addresses.
Authentication using two factors
URLs for logging in that are unique
Keep an eye on the server logs.


What do you mean by Domain Name System (DNS) Attack?
DNS hijacking is a sort of cyberattack in which cyber thieves utilize weaknesses in the Domain Name System to redirect users to malicious websites and steal data from targeted machines. Because the DNS system is such an important part of the internet infrastructure, it poses a serious cybersecurity risk.

hese can be avoided by the following precautions:-

Examine the DNS zones in your system.
Make sure your DNS servers are up to current.
The BIND version is hidden.
Transfers between zones should be limited.
To avoid DNS poisoning attempts, disable DNS recursion.
Use DNS servers that are separated.
Make use of a DDOS mitigation service.



What is the difference between virus and worm?
A virus is a piece of harmful executable code that is attached to another executable file and can modify or erase data. When a virus-infected computer application executes, it takes action such as removing a file from the computer system. Viruses can't be managed from afar.
Worms are comparable to viruses in that they do not alter the program. It continues to multiply itself, causing the computer system to slow down. Worms can be manipulated with remote control. Worms' primary goal is to consume system resources.



Single Sign On

ingle sign-on (SSO) is an authentication scheme that allows a user to log in with a single ID to any of several related, yet independent, software systems.

True single sign-on allows the user to log in once and access services without re-entering authentication factors.

It should not be confused with same-sign on (Directory Server Authentication), often accomplished by using the Lightweight Directory Access Protocol (LDAP) and stored LDAP databases on (directory) servers.[1][2]

A simple version of single sign-on can be achieved over IP networks using cookies but only if the sites share a common DNS parent domain.[3]

For clarity, a distinction is made between Directory Server Authentication (same-sign on) and single sign-on: Directory Server Authentication refers to systems requiring authentication for each application but using the same credentials from a directory server, whereas single sign-on refers to systems where a single authentication provides access to multiple applications by passing the authentication token seamlessly to configured applications.

Conversely, single sign-off or single log-out (SLO) is the property whereby a single action of signing out terminates access to multiple software systems.

As different applications and resources support different authentication mechanisms, single sign-on must internally store the credentials used for initial authentication and translate them to the credentials required for the different mechanisms.

Other shared authentication schemes, such as OpenID and OpenID Connect, offer other services that may require users to make choices during a sign-on to a resource, but can be configured for single sign-on if those other services (such as user consent) are disabled.[4] An increasing number of federated social logons, like Facebook Connect, do require the user to enter consent choices upon first registration with a new resource, and so are not always single sign-on in the strictest sense.

Benefits of using single sign-on include:

Mitigate risk for access to 3rd-party sites ("federated authentication")[5] because user passwords are not stored or managed externally
Reduce password fatigue from different username and password combinations
Reduce time spent re-entering passwords for the same identity[5]
Reduce IT costs due to lower number of IT help desk calls about passwords[6]
Simpler administration. SSO-related tasks are performed transparently as part of normal maintenance, using the same tools that are used for other administrative tasks.
Better administrative control. All network management information is stored in a single repository. This means that there is a single, authoritative listing of each user’s rights and privileges. This allows the administrator to change a user’s privileges and know that the results will propagate network wide.
Improved user productivity. Users are no longer bogged down by multiple logons, nor are they required to remember multiple passwords in order to access network resources. This is also a benefit to Help desk personnel, who need to field fewer requests for forgotten passwords.
Better network security. Eliminating multiple passwords also reduces a common source of security breaches—users writing down their passwords. Finally, because of the consolidation of network management information, the administrator can know with certainty that when he disables a user’s account, the account is fully disabled.
Consolidation of heterogeneous networks. By joining disparate networks, administrative efforts can be consolidated, ensuring that administrative best practices and corporate security policies are being consistently enforced.
SSO shares centralized authentication servers that all other applications and systems use for authentication purposes and combines this with techniques to ensure that users do not have to actively enter their credentials more than once.




Security Assertion Markup Language
https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language

OAUTH

OAuth (short for "Open Authorization"[1][2]) is an open standard for access delegation, commonly used as a way for internet users to grant websites or applications access to their information on other websites but without giving them the passwords.[3][4] This mechanism is used by companies such as Amazon,[5] Google, Facebook, Microsoft, and Twitter to permit the users to share information about their accounts with third-party applications or websites.

Generally, the OAuth protocol provides a way for resource owners to provide a client [application] with secure delegated access to server resources. It specifies a process for resource owners to authorize third-party access to their server resources without providing credentials. Designed specifically to work with Hypertext Transfer Protocol (HTTP), OAuth essentially allows access tokens to be issued to third-party clients by an authorization server, with the approval of the resource owner. The third party then uses the access token to access the protected resources hosted by the resource server.[2]


JWT - JSON Web Token
- A JSON web token has 3 segments seperated by . dot. 
  Each segment has base64 encoded data
    First Segment is header: it contains type of data, algorith, and signature info
    Second Segment: payload or data passed in token
    Third Segment: It contains signature information, it is generated using header, payload and ssh sign key
- A JSON web token is base64 encoded string signed by a digital signature
- JWT token uses asymmetric crytography, where a private key is used to sign a token and public key is used to validate a token, this means the service who has the private key can only create the tokens and client service who has the public key can only validate the token

https://robertheaton.com/2014/03/27/how-does-https-actually-work/#:~:text=The%20client%20uses%20the%20server's,decrypt%20using%20the%20private%20key.


Asymmetric Encryption Decription Using Linux openssl shell tool: (https://cryptotools.net/rsagen)

1. Generate Private Key:
	openssl genrsa > private_key.pem
2. Derive Public Key from Private Key
    openssl rsa -in private_key.pem -pubout -out public_key.pem
3. Encrypt the data using public key
     openssl pkeyutl -encrypt -inkey public_key.pem -pubin -in data.txt -out data_encrypted.txt
4. Decrypt the data using private key
     openssl pkeyutl -decrypt -inkey private_key.pem -in data_encrypted.txt -out data_decrypted.txt

Symmetric Encryption

1. Generate Key
    openssl rand 214 > encryption_key.key
2. Encrypt file using key
    openssl enc -in data.txt -out encrypted_data.txt -e -aes256 -pbkdf2 -kfile encryption_key.key

3. Decrypt file using key
    openssl enc -in encrypted_data.txt -out decrypted_data.txt -d -aes256 -pbkdf2 -kfile encryption_key.key




https://en.wikipedia.org/wiki/Public-key_cryptography
https://www.digitalocean.com/community/tutorials/understanding-the-ssh-encryption-and-connection-process

https://www.youtube.com/watch?v=T4Df5_cojAs

2 Factor Authentication
It adds one more layer on top of basic username, passoword authentication.
It can be implemented in multiple methods

1. Sending OTP to the User: In this case, service sends a OTP to the User to its registered phone no. or email id. Which is required to complete the authentication.

2. Authentication App: User can install an in his device (e.g google authenticator). These apps use some algorithm to generate some number. During login process as a second step, user has to pass the number generated by the Authentication App.

3. Security Key: Security Key is a hardware device similiar to pendrive. As second step user has to attach this device to his device in order to authenticate.


